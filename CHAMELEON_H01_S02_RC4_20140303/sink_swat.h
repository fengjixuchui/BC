/****************************************************************************
Copyright (C) Cambridge Silicon Radio Limited 2012-2013
Part of ADK 2.5.1

FILE NAME
    sink_swat.h

DESCRIPTION
    Header file for interface with Subwoofer Audio Transfer library

NOTES

*/
#ifndef _SINK_SWAT_H_
#define _SINK_SWAT_H_

#ifdef ENABLE_SUBWOOFER

/* Application includes */
#include "sink_debug.h"
#include "sink_configmanager.h"

/* Library includes */
#include <swat.h>
#include <bdaddr.h>
#include <connection.h>

/* SWAT Debug macro */
#ifdef DEBUG_SWAT
#define SWAT_DEBUG(x) DEBUG(x)
#else
#define SWAT_DEBUG(x)
#endif

#define SUBWOOFER_CLASS_OF_DEVICE 0x240414 /* Subwoofer COD = Service classes: Audio & Rendering, Major device class: Audio/Video Device, Minor Device class: Loudspeaker */

#define SW_MAX_REMOTE_DEVICES   1           /* The number of remote devices SWAT will support */
#define SW_MAX_INQUIRY_DEVS     5           /* The maximum number of subwoofer devices to return for inquiry mode */
#define SW_MAX_INQUIRY_TIME     10          /* The maximum time to enable inquiry mode when searching for subwoofer devices */
#define INQUIRY_LAP             0x9E8B33    /* The General/Unlimited Inquiry Access Code */
#define SW_INQUIRY_RETRY_TIME   11000       /* time after which another subwoofer inquiry is performed */
#define SW_INQUIRY_ATTEMPTS     3           /* number of times to try an inquiry scan */
#define SUB_WOOFER_CONNECT_RETRY_INTERVAL 30000 /* time before attempting another connection to the sub, allow other connections/pairing to complete */
#define SUB_TRIM_MAX            16          /* The maximum number of subwoofer trim volumes */
#define DEFAULT_SUB_TRIM_INDEX  10

/*************************************************************************
NAME    
    handleSwatMessage
    
DESCRIPTION
    Function to handle messages generated by the SWAT library
*/
void handleSwatMessage(Task task, MessageId id, Message message);


/*************************************************************************
NAME    
    markSubwooferMostRecentDevice
    
DESCRIPTION
    Function to mark the subwoofer device as the most recently connected 
    device so it doesn't get over-written when pairing any new devices.
*/
void markSubwooferMostRecentDevice(void);


/*************************************************************************
NAME
    handleSubwooferGetAuthDevice
    
DESCRIPTION
    Handle CL_SM_GET_AUTH_DEVICE_CFM for subwoofer devices
*/
void handleSubwooferGetAuthDevice(CL_SM_GET_AUTH_DEVICE_CFM_T * cfm);


/*************************************************************************
NAME    
    handleEventSubwooferStartInquiry
    
DESCRIPTION
    Function to handle the user event to start an inquiry search for
    a subwoofer device
*/
void handleEventSubwooferStartInquiry(void);


/*************************************************************************
NAME    
    handleSubwooferInquiryResult
    
DESCRIPTION
    Function to handle when an Inquiry result is returned from CL when in 
    inquiry_action rssi_subwoofer.
*/
void handleSubwooferInquiryResult( CL_DM_INQUIRE_RESULT_T* result );


/*************************************************************************
NAME    
    handleEventSubwooferConnect
    
DESCRIPTION
    Function to handle the user event for connecting a subwoofer device
*/
void handleEventSubwooferCheckPairing(void);


/*************************************************************************
NAME    
    handleEventSubwooferOpenLLMedia
    
DESCRIPTION
    Function to handle the user event for opening a Low Latency SWAT 
    media channel to the subwoofer device
*/
void handleEventSubwooferOpenLLMedia(void);


/*************************************************************************
NAME    
    handleEventSubwooferOpenStdMedia
    
DESCRIPTION
    Function to handle the user event for opening a Standard Latency SWAT 
    media channel to the subwoofer device
*/
void handleEventSubwooferOpenStdMedia(void);


/*************************************************************************
NAME    
    handleEventSubwooferCloseMedia
    
DESCRIPTION
    Function to handle the user event for closing the open SWAT media
    channel to the subwoofer device
*/
void handleEventSubwooferCloseMedia(void);


/*************************************************************************
NAME    
    handleEventSubwooferStartStreaming
    
DESCRIPTION
    Function to handle the user event to start streaming audio data over
    the open SWAT media channel to the subwoofer device
*/
void handleEventSubwooferStartStreaming(void);


/*************************************************************************
NAME    
    handleEventSubwooferSuspendStreaming
    
DESCRIPTION
    Function to handle the user event to suspend audio streaming over the
    open SWAT media channel to the subwoofer device
*/
void handleEventSubwooferSuspendStreaming(void);


/*************************************************************************
NAME    
    handleEventSubwooferDisconnect
    
DESCRIPTION
    Function to handle the user event disconnect a connected subwoofer
    device
*/
void handleEventSubwooferDisconnect(void);


/*************************************************************************
NAME    
    handleEventSubwooferVolumeDown
    
DESCRIPTION
    Function to handle the user event to decrease the subwoofer volume
*/
void handleEventSubwooferVolumeDown(void);


/*************************************************************************
NAME    
    handleEventSubwooferVolumeUp
    
DESCRIPTION
    Function to handle the user event to decrease the subwoofer volume
*/
void handleEventSubwooferVolumeUp(void);


/*************************************************************************
NAME    
    handleEventSubwooferDeletePairing
    
DESCRIPTION
    Function to handle the user event to delete the subwoofer pairing info
    from the soundbar PDL
*/
void handleEventSubwooferDeletePairing(void);


/*************************************************************************
NAME    
    storeSubwooferBdaddr
    
DESCRIPTION
    Function to store the subwoofer bluetooth address to the PS Store
*/
void storeSubwooferBdaddr(const bdaddr * addr);


/*************************************************************************
NAME    
    updateSwatVolume
    
DESCRIPTION
    Function to update the SWAT system volume that is also sent to the 
    subwoofer device to keep volume sync'd
*/
void updateSwatVolume(uint16 new_volume);


/*************************************************************************
NAME    
    deleteSubwooferPairing

PARAMETERS
    delete_link_key - Flag to also delete the link key, otherwise will
    only delete the PS Data from PSKEY_SW_BDADDR.

DESCRIPTION
    Function to delete the subwoofer pairing informtion from the soundbar
*/
void deleteSubwooferPairing(bool delete_link_key);


/*************************************************************************
NAME    
    sendSampleRateToSub
    
DESCRIPTION
    Function to send the sample rate (in use) to the subwoofer
*/
void sendSampleRateToSub(uint16 sample_rate);


#endif /* ENABLE_SUBWOOFER */


#endif /* _SINK_SWAT_H_ */
